package com.jjshome.viewer.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jjshome.viewer.model.FileModel;
import com.jjshome.viewer.service.Doc2PdfService;
import com.jjshome.viewer.service.DownloadNetFileService;
import com.jjshome.viewer.service.FileService;

/**
 * @Description: 在线预览控制器
 * @author liaohongwei
 * @date 2016年6月23日 下午3:15:27
 */
@Controller
public class ViewerController {

	@Autowired
	private DownloadNetFileService downloadNetFileService;

	@Autowired
	private Doc2PdfService doc2PdfService;

	@Autowired
	private FileService fileService;

	/**
	 * @Description: 在线预览 1.获取文件 2.转换文件 3.重定向到阅读器
	 * @param file
	 * @param request
	 * @param response
	 * @author liaohongwei
	 * @throws UnsupportedEncodingException
	 * @date 2016年6月23日 下午3:16:00
	 */
	@RequestMapping(value = "/viewer", method = RequestMethod.GET)
	public String preview(String file, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// 先去查询,如果存在,不需要转化文档,直接预览.为找到有效安全的url编码,所以这里使用循环来当前文件是否存在
		FileModel oldFileModel = null;
		List<String> keys = this.fileService.findAllKeys();
		for (String key : keys) {
			FileModel tmp = this.fileService.findFileModelByPathId(key);
			if (tmp != null && tmp.getOriginal().equals(file)) {
				oldFileModel = tmp;
				break;
			}
		}
		if (oldFileModel != null
				&& (new Date().getTime() - oldFileModel.getCreateMs() <= oldFileModel
						.getLimitMs())) {
			return getPreviewUrl(oldFileModel);
		} else {
			FileModel fileModel = new FileModel();
			// 文件来源url
			fileModel.setOriginal(file);
			// 创建时间,使用毫秒数
			fileModel.setCreateMs(new Date().getTime());
			// 文件有效时间 10分钟TODO
			fileModel.setLimitMs(10 * 60 * 1000);
			// 文件新建 未下载状态
			fileModel.setState(FileModel.STATE_WXZ);

			// 下载文件
			this.downloadNetFileService.download(fileModel);

			// 转换文件-->pdf
			this.doc2PdfService.convert(fileModel);

			// 重定向到viewer.js 预览文件
			if (fileModel.getState() != FileModel.STATE_YZH) {
				throw new RuntimeException("convert fail.");
			}
			return getPreviewUrl(fileModel);
		}

	}

	/**
	 * @Description: 获取重定向路径
	 * @param fileModel
	 * @throws UnsupportedEncodingException
	 * @author liaohongwei
	 * @date 2016年6月27日 下午4:06:23
	 */
	private String getPreviewUrl(FileModel fileModel)
			throws UnsupportedEncodingException {
		StringBuffer previewUrl = new StringBuffer();
		previewUrl.append("/viewer/document/");
		// pathId确定预览文件
		previewUrl.append(fileModel.getPathId());
		previewUrl.append("/");
		// 真实文件名称作为viewer.js的title
		previewUrl.append(fileModel.getOriginalFile());

		// 判断pdf文件是否存在,不存在跳到error页面
		File file = new File(fileModel.getDir() + "/"
				+ fileModel.getPreviewPdf());
		if (file.exists()) {
			return "redirect:/viewer/web/viewer.html?file="
					+ new String(previewUrl.toString().getBytes("UTF-8"),
							"ISO-8859-1");
		} else {
			return "forward:/error";
		}

	}

	/**
	 * @Description: 获取预览文件
	 * @param pathId
	 * @param fileName
	 * @param request
	 * @param response
	 * @throws IOException
	 * @author liaohongwei
	 * @date 2016年6月24日 上午11:27:43
	 */
	@RequestMapping(value = "/viewer/document/{pathId}/**", method = RequestMethod.GET)
	public void getPreviewDoc(@PathVariable String pathId,
			HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		// 这里的fileName spring注入进来时,忽略了后缀.此处并不影响 获取完成的fileName使用以下方法
		// String uri = request.getServletPath();
		// String fullFileName = uri.substring(uri.lastIndexOf("/"));
		// 获取文件信息
		FileModel fileModel = this.fileService.findFileModelByPathId(pathId);
		if (fileModel == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			return;
		}
		if (fileModel.getState() != FileModel.STATE_YZH) {
			throw new RuntimeException("convert fail.");
		}

		File file = new File(fileModel.getDir() + "/"
				+ fileModel.getPreviewPdf());
		// 设置内容长度
		response.setContentLength((int) file.length());
		// 内容配置中要转码,inline 浏览器支持的格式会在浏览器中打开,否则下载
		String fullFileName = new String(fileModel.getOriginalFile().getBytes(
				"UTF-8"), "ISO-8859-1");
		response.setHeader("Content-Disposition", "inline;fileName=\""
				+ fullFileName + "\"");

		// 这里所有文件都是pdf
		response.setContentType("application/pdf");

		// 批量传输,文件较大,网络较慢时,viewer.js可以一点点加载
		OutputStream out = null;
		InputStream in = null;
		try {
			out = response.getOutputStream();
			in = new FileInputStream(file);
			byte[] bytes = new byte[1024];
			int tmp = 0;
			while ((tmp = in.read(bytes)) != -1) {
				out.write(bytes, 0, tmp);
				out.flush();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (out != null) {
				out.close();
			}
			if (in != null) {
				in.close();
			}
		}
	}

}
