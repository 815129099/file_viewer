package com.jjshome.viewer.service.impl;

import java.io.File;
import java.util.ArrayList;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.artofsolving.jodconverter.OfficeDocumentConverter;
import org.artofsolving.jodconverter.office.DefaultOfficeManagerConfiguration;
import org.artofsolving.jodconverter.office.OfficeManager;
import org.mozilla.intl.chardet.nsPSMDetector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.jjshome.viewer.dao.FileDao;
import com.jjshome.viewer.model.FileModel;
import com.jjshome.viewer.service.Doc2PdfService;
import com.jjshome.viewer.tools.FileCharsetDetector;
import com.jjshome.viewer.tools.FileCharsetDetector.Observer;
import com.jjshome.viewer.tools.FileUtils;

@Service
public class Doc2PdfServiceImpl implements Doc2PdfService {

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Value("${soffice.home}")
	private String officeHome;

	@Value("${soffice.port}")
	private int port;

	@Value("${soffice.defaultCharset}")
	private String defaultCharset;

	@Value("${text.type}")
	private String textType;

	@Value("${img.type}")
	private String imgType;

	/**
	 * @Fields officeManager : openoffice管理器
	 */
	private OfficeManager officeManager;

	@Autowired
	private FileDao fileDao;

	@Override
	public void convert(FileModel fileModel) {
		if (fileModel.getState() != FileModel.STATE_YXZ) {
			throw new RuntimeException("the file state:" + fileModel.getState()
					+ " is not 2.");
		}
		try {
			String subfix = FileUtils.getFileSufix(fileModel.getOriginalFile());
			if ("pdf".equals(subfix.toLowerCase())) {
				// 本身是pdf,不需要转换了
				fileModel.setPreviewPdf(fileModel.getOriginalFile());
			} else if (this.textType.indexOf(subfix.toLowerCase()) != -1) {

				// 纯文本,涉及到文件编码问题
				File original = new File(fileModel.getDir() + "/"
						+ fileModel.getOriginalFile());
				Observer oCharset = FileCharsetDetector.guessFileEncoding(
						original, nsPSMDetector.CHINESE);
				String charset = null;
				if (oCharset.isFound()) {
					// 探测到编码
					charset = oCharset.getEncoding();
				} else if (oCharset.getEncoding() != null
						&& !oCharset.isFound()) {
					// 猜测到编码
					logger.error("Doc2PdfServiceImpl@convert error:"
							+ fileModel.getOriginal()
							+ ",use the guess charset:"
							+ oCharset.getEncoding());
					charset = oCharset.getEncoding();
				} else {
					// 未找到编码,大部分情况 文档都是来自同一个window系统,使用GBK
					logger.error("Doc2PdfServiceImpl@convert error:"
							+ fileModel.getOriginal()
							+ ",can't find the charset.use :GBK");
					charset = "GBK";
				}
				/*
				 * 此处直接改变纯文本文件编码及后缀,导致odt文件不被openoffice识别,无法转化为pdf,errorcode:2074
				 * 改变做法,纯文本一律先转化为UTF-8的txt文件在进行转码 2016年6月29日 15:47:00
				 */
				// 按输入输出的编码转存文版文件,odt是openoffice的纯文本文件类型
				// String odtFile = fileModel.getDir() + "/"
				// + FileUtils.getFileName(fileModel.getOriginalFile())
				// + ".odt";
				String outFile = fileModel.getDir() + "/"
						+ FileUtils.getFileName(fileModel.getOriginalFile())
						+ "-utf8.txt";
				String inFile = fileModel.getDir() + "/"
						+ fileModel.getOriginalFile();
				FileUtils.copyFile(inFile, charset, outFile, "UTF-8");

				if (fileModel.getFilePaths() == null) {
					fileModel.setFilePaths(new ArrayList<String>());
				}
				fileModel.getFilePaths().add(
						FileUtils.getFileName(fileModel.getOriginalFile())
								+ "-utf8.txt");

				fileModel.setPreviewPdf(FileUtils.getFileName(fileModel
						.getOriginalFile()) + ".pdf");
				String outPdf = fileModel.getDir() + "/"
						+ fileModel.getPreviewPdf();

				convert2PDF(outFile, outPdf);

			} else if (this.imgType.indexOf(subfix.toLowerCase()) != -1) {
				// 图片需要考虑,大小压缩问题.
				// TODO 有待研究 目前直接转pdf
				String fileName = FileUtils
						.getFileName(fileModel.getOriginal());
				fileModel.setPreviewPdf(fileName + ".pdf");

				String inputFile = fileModel.getDir() + "/"
						+ fileModel.getOriginalFile();
				String outputFile = fileModel.getDir() + "/"
						+ fileModel.getPreviewPdf();
				convert2PDF(inputFile, outputFile);
			} else {
				// 其他类型文件,尝试转换为pdf.包括doc,docx,xlsx,xls,ppt,pptx
				String fileName = FileUtils
						.getFileName(fileModel.getOriginal());
				fileModel.setPreviewPdf(fileName + ".pdf");

				String inputFile = fileModel.getDir() + "/"
						+ fileModel.getOriginalFile();
				String outputFile = fileModel.getDir() + "/"
						+ fileModel.getPreviewPdf();
				convert2PDF(inputFile, outputFile);
			}
			fileModel.setState(FileModel.STATE_YZH);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	@PostConstruct
	public void init() {
		// 开启openoffice服务
		startService();
	}

	@PreDestroy
	public void destroy() {
		stopService();
	}

	private void startService() {
		DefaultOfficeManagerConfiguration configuration = new DefaultOfficeManagerConfiguration();
		this.logger.warn("start openoffice....");
		configuration.setOfficeHome(officeHome);// 设置OpenOffice.org安装目录
		configuration.setPortNumbers(port); // 设置转换端口，默认为8100
		configuration.setTaskExecutionTimeout(1000 * 60 * 5L);// 设置任务执行超时为5分钟
		configuration.setTaskQueueTimeout(1000 * 60 * 60 * 24L);// 设置任务队列超时为24小时

		officeManager = configuration.buildOfficeManager();
		officeManager.start(); // 启动服务
		this.logger.warn("openoffice start success!");
	}

	private void stopService() {
		this.logger.warn("stop openoffice...");
		if (officeManager != null) {
			officeManager.stop();
		}
		this.logger.warn("stop openoffice success!");
	}

	private File convert2PDF(String inputFile, String pdfFile) {
		this.logger.info("进行文档转换转换:" + inputFile + " --> " + pdfFile);
		OfficeDocumentConverter converter = new OfficeDocumentConverter(
				officeManager);
		File input = new File(inputFile);
		File pdf = new File(pdfFile);
		converter.convert(input, pdf);
		return pdf;
	}

}
